# -*- coding: utf-8 -*-
"""LVADSUSR161_ia2_krithiksri_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13FEu9AHwBA_v_TT_Y53_yvkO2NBSYGq2
"""

from sklearn.cluster import KMeans
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score,precision_score,recall_score,silhouette_score
from sklearn.preprocessing import MinMaxScaler,LabelEncoder

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("Mall_Customers.csv")
df.head(3)

df.duplicated().sum()

df.shape

df.describe(include='all')

#2.5)tasks
#A)data exploration and preprocessing
#normalization
scale=MinMaxScaler()
scale.fit(df[['Age']])
df['Age']=scale.transform(df[['Age']])
scale.fit(df[['Spending Score (1-100)']])
df['Spending Score (1-100)']=scale.transform(df[['Spending Score (1-100)']])

#handling missing values
df.isna().sum()

df['Annual Income (k$)'].fillna(df['Annual Income (k$)'].mean(),inplace=True)

df.isnull().sum()

#B)optimal clustering
#elbow method
sse=[]
k_range=range(1,10)
for i in k_range:
  k=KMeans(n_clusters=i)
  k.fit_predict(df[['Age','Spending Score (1-100)']])
  sse.append(k.inertia_)

plt.plot(k_range,sse)
plt.show()

#C)cluster algorithm
k=KMeans(n_clusters=4)
y_pred=k.fit_predict(df[['Age','Spending Score (1-100)']])

silhouette_score(df[['Age','Spending Score (1-100)']],y_pred)

#D)cluster analysis
df['cluster']=y_pred
df1=df[df['cluster']==0]
df2=df[df['cluster']==1]
df3=df[df['cluster']==2]
df4=df[df['cluster']==3]
print(k.cluster_centers_)
plt.scatter(df1.Age,df1['Spending Score (1-100)'],color='green')
plt.scatter(df2.Age,df2['Spending Score (1-100)'],color='red')
plt.scatter(df3.Age,df3['Spending Score (1-100)'],color='blue')
plt.scatter(df4.Age,df4['Spending Score (1-100)'],color='black')
plt.scatter(k.cluster_centers_[:,0],k.cluster_centers_[:,1],marker="*",color='purple',label="centroid")
plt.xlabel("age")
plt.ylabel("spending pattern")
plt.show()

#E)strategy development
sns.barplot(data=df,x=df['Age'],y=df['Spending Score (1-100)'])
plt.xticks(rotation=45)
#based on age the cluster are partitioned into four categories

