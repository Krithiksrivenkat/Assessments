# -*- coding: utf-8 -*-
"""LVADSUSR161_IA1(PA).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W82_u2wxVZmDeKoKLXcdNBjSHgCBg1k1
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.metrics import r2_score,mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("expenses.csv")

df.head(3)

df.shape

df.info()

df.describe(include='all')

#1.5)tasks
#1)handling missing values and outliers
df.isnull().sum()

bmi_mean=df['bmi'].mean()
df['bmi']=df['bmi'].fillna(bmi_mean)

df.isnull().sum()

#checking for outliers
for columns in df.select_dtypes(include=['float64','int64']).columns:
  sns.boxplot(x=df[columns])
  plt.show()

#handling outliers and plot again
for column in df.select_dtypes(include=['float64','int64']).columns:
  q1=df[column].quantile(0.25)
  q3=df[column].quantile(0.75)
  iqr=q3-q1
  lower_bound=q1-1.5*iqr
  upper_bound=q3+1.5*iqr
  df[column]=df[column].clip(lower=lower_bound,upper=upper_bound)
  sns.boxplot(x=df[column])
  plt.show()

#2)encoding categorical data
#but all are numerical so no need of these code
from sklearn.preprocessing import LabelEncoder
label=LabelEncoder()
for column in df.select_dtypes(include=['object']).columns:
  df[column]=label.fit_transform(df[column])

df.head(3)

#3)data cleaning removes duplicates
df.duplicated().sum()

df.drop_duplicates(inplace=True)
df.duplicated().sum()

#feature selection
correlation=df.corr()
sns.heatmap(correlation,annot=True,fmt=".2f",cmap='coolwarm')
plt.show()

#4)data splitting
x=df.drop(columns=['charges'])
y=df['charges']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=43)

#scaled the model
scale=MinMaxScaler()
x_train_scaled=scale.fit_transform(x_train)
x_test_scaled=scale.transform(x_test)

#5)model fitting
model=LinearRegression()
model.fit(x_train_scaled,y_train)

y_pred=model.predict(x_test_scaled)

#6)model evaluation
print("R2_score:",r2_score(y_test,y_pred))
print("RMSE",mean_squared_error(y_test,y_pred,squared=False))

x_test.head(1)

#charge prediction
age=int(input("enter age:"))
sex=int(input("enter sex as male 1 and female 0: "))
bmi=int(input("enter bmi:"))
children=int(input("enter count of children:"))
smoker=int(input("did u smoke or not if smoke put 1 or 0:"))
region=int(input("enter region as numerical:"))

data=pd.DataFrame({
    'age':[age],
    'sex':[sex],
    'bmi':[bmi],
    'children':[children],
    'smoker':[smoker],
    'region':[region]
})

charge=model.predict(data)[0]
print(charge)