# -*- coding: utf-8 -*-
"""LVADSUSR161_KRITHIKSRI_final_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15fxOfXP9sLiEpA1V4Qb9fxhbW-mnQBac
"""

#importing libraries
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score,precision_score,recall_score
from sklearn.preprocessing import MinMaxScaler

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#load the data
df=pd.read_csv('/content/penguins_classification.csv')

df.head()

df.info()

df.describe()

df.shape

#handle missing value
df.isna().sum()

df['bill_depth_mm'].fillna(df['bill_depth_mm'].mean(),inplace=True)

df.isnull().sum()

df.duplicated().sum()

#handle outliers
for columns in df.select_dtypes(include=['float64','int64']).columns:
  sns.boxplot(x=df[columns])
  plt.show()

for i in df.select_dtypes(include=['float64','int64']).columns:
  q1=df[i].quantile(0.25)
  q3=df[i].quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  df[i]=df[i].clip(lower=lower,upper=upper)
  sns.boxplot(x=df[i])
  plt.show()

#feature selection
numerical=df.select_dtypes(include=['float64','int64']).columns
corre=df[numerical].corr()
print(corre)
sns.heatmap(corre,annot=True,cmap='coolwarm')
plt.show

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.select_dtypes(include=['object']).columns:
  df[i]=l.fit_transform(df[i])

df.info()

df['species'].value_counts()

x=df.drop(columns=['species'])
y=df['species']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

scale=MinMaxScaler()
x_scl=scale.fit_transform(x_train)
x_t=scale.transform(x_test)

model=RandomForestClassifier()
model.fit(x_scl,y_train)

y_pred=model.predict(x_t)

print(classification_report(y_test,y_pred))
c=confusion_matrix(y_test,y_pred)
sns.heatmap(c,annot=True,fmt='g')
plt.xlabel("predicted")
plt.ylabel("actual")
plt.show()

model1=XGBClassifier(eta=0.01,gamma=10)
model1.fit(x_scl,y_train)

y_pred1=model1.predict(x_t)

print(classification_report(y_test,y_pred1))
c1=confusion_matrix(y_test,y_pred1)
sns.heatmap(c1,annot=True,fmt='g')
plt.xlabel("predicted")
plt.ylabel("actual")
plt.show()